// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: w3/exchange/pb/w3_core_enum.proto

package w3.exchange.pb;

public final class W3CoreEnum {
  private W3CoreEnum() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * ProductClassEnum是一个产品类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.ProductClassEnum}
   */
  public enum ProductClassEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownProductClass = 0;</code>
     */
    UnknownProductClass(0),
    /**
     * <pre>
     * 币币
     * </pre>
     *
     * <code>SPOT = 1;</code>
     */
    SPOT(1),
    /**
     * <pre>
     * 币币杠杆
     * </pre>
     *
     * <code>MARGIN = 2;</code>
     */
    MARGIN(2),
    /**
     * <pre>
     * 永续合约
     * </pre>
     *
     * <code>SWAP = 3;</code>
     */
    SWAP(3),
    /**
     * <pre>
     * 交割合约
     * </pre>
     *
     * <code>FUTURES = 4;</code>
     */
    FUTURES(4),
    /**
     * <pre>
     * 期权
     * </pre>
     *
     * <code>OPTION = 5;</code>
     */
    OPTION(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownProductClass = 0;</code>
     */
    public static final int UnknownProductClass_VALUE = 0;
    /**
     * <pre>
     * 币币
     * </pre>
     *
     * <code>SPOT = 1;</code>
     */
    public static final int SPOT_VALUE = 1;
    /**
     * <pre>
     * 币币杠杆
     * </pre>
     *
     * <code>MARGIN = 2;</code>
     */
    public static final int MARGIN_VALUE = 2;
    /**
     * <pre>
     * 永续合约
     * </pre>
     *
     * <code>SWAP = 3;</code>
     */
    public static final int SWAP_VALUE = 3;
    /**
     * <pre>
     * 交割合约
     * </pre>
     *
     * <code>FUTURES = 4;</code>
     */
    public static final int FUTURES_VALUE = 4;
    /**
     * <pre>
     * 期权
     * </pre>
     *
     * <code>OPTION = 5;</code>
     */
    public static final int OPTION_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProductClassEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ProductClassEnum forNumber(int value) {
      switch (value) {
        case 0: return UnknownProductClass;
        case 1: return SPOT;
        case 2: return MARGIN;
        case 3: return SWAP;
        case 4: return FUTURES;
        case 5: return OPTION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProductClassEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ProductClassEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProductClassEnum>() {
            public ProductClassEnum findValueByNumber(int number) {
              return ProductClassEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(0);
    }

    private static final ProductClassEnum[] VALUES = values();

    public static ProductClassEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ProductClassEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.ProductClassEnum)
  }

  /**
   * <pre>
   * CurrencyEnum是一个货币类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.CurrencyEnum}
   */
  public enum CurrencyEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownCurrency = 0;</code>
     */
    UnknownCurrency(0),
    /**
     * <pre>
     * 美元稳定币
     * </pre>
     *
     * <code>USDT = 1;</code>
     */
    USDT(1),
    /**
     * <pre>
     * 币安稳定币
     * </pre>
     *
     * <code>BUSD = 2;</code>
     */
    BUSD(2),
    /**
     * <pre>
     * 去中心化稳定币
     * </pre>
     *
     * <code>USDC = 3;</code>
     */
    USDC(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownCurrency = 0;</code>
     */
    public static final int UnknownCurrency_VALUE = 0;
    /**
     * <pre>
     * 美元稳定币
     * </pre>
     *
     * <code>USDT = 1;</code>
     */
    public static final int USDT_VALUE = 1;
    /**
     * <pre>
     * 币安稳定币
     * </pre>
     *
     * <code>BUSD = 2;</code>
     */
    public static final int BUSD_VALUE = 2;
    /**
     * <pre>
     * 去中心化稳定币
     * </pre>
     *
     * <code>USDC = 3;</code>
     */
    public static final int USDC_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CurrencyEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CurrencyEnum forNumber(int value) {
      switch (value) {
        case 0: return UnknownCurrency;
        case 1: return USDT;
        case 2: return BUSD;
        case 3: return USDC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CurrencyEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CurrencyEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CurrencyEnum>() {
            public CurrencyEnum findValueByNumber(int number) {
              return CurrencyEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(1);
    }

    private static final CurrencyEnum[] VALUES = values();

    public static CurrencyEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CurrencyEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.CurrencyEnum)
  }

  /**
   * <pre>
   * ExchangeEnum是一个交易所类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.ExchangeEnum}
   */
  public enum ExchangeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownExchange = 0;</code>
     */
    UnknownExchange(0),
    /**
     * <pre>
     * 币安交易所
     * </pre>
     *
     * <code>BINANCE = 1;</code>
     */
    BINANCE(1),
    /**
     * <pre>
     * 欧易交易所
     * </pre>
     *
     * <code>OKX = 2;</code>
     */
    OKX(2),
    /**
     * <pre>
     * 芝麻开门交易所
     * </pre>
     *
     * <code>GATE = 3;</code>
     */
    GATE(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UnknownExchange = 0;</code>
     */
    public static final int UnknownExchange_VALUE = 0;
    /**
     * <pre>
     * 币安交易所
     * </pre>
     *
     * <code>BINANCE = 1;</code>
     */
    public static final int BINANCE_VALUE = 1;
    /**
     * <pre>
     * 欧易交易所
     * </pre>
     *
     * <code>OKX = 2;</code>
     */
    public static final int OKX_VALUE = 2;
    /**
     * <pre>
     * 芝麻开门交易所
     * </pre>
     *
     * <code>GATE = 3;</code>
     */
    public static final int GATE_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExchangeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ExchangeEnum forNumber(int value) {
      switch (value) {
        case 0: return UnknownExchange;
        case 1: return BINANCE;
        case 2: return OKX;
        case 3: return GATE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExchangeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExchangeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExchangeEnum>() {
            public ExchangeEnum findValueByNumber(int number) {
              return ExchangeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(2);
    }

    private static final ExchangeEnum[] VALUES = values();

    public static ExchangeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExchangeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.ExchangeEnum)
  }

  /**
   * <pre>
   * Bar周期
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.BarCycleEnum}
   */
  public enum BarCycleEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>B_5Sec = 0;</code>
     */
    B_5Sec(0),
    /**
     * <code>B_1Min = 1;</code>
     */
    B_1Min(1),
    /**
     * <code>B_3Min = 2;</code>
     */
    B_3Min(2),
    /**
     * <code>B_5Min = 3;</code>
     */
    B_5Min(3),
    /**
     * <code>B_15Min = 4;</code>
     */
    B_15Min(4),
    /**
     * <code>B_30Min = 5;</code>
     */
    B_30Min(5),
    /**
     * <code>B_1H = 6;</code>
     */
    B_1H(6),
    /**
     * <code>B_2H = 7;</code>
     */
    B_2H(7),
    /**
     * <code>B_4H = 8;</code>
     */
    B_4H(8),
    /**
     * <code>B_6H = 9;</code>
     */
    B_6H(9),
    /**
     * <code>B_8H = 10;</code>
     */
    B_8H(10),
    /**
     * <code>B_12H = 11;</code>
     */
    B_12H(11),
    /**
     * <code>B_1Day = 12;</code>
     */
    B_1Day(12),
    /**
     * <code>B_3Day = 13;</code>
     */
    B_3Day(13),
    /**
     * <code>B_1W = 14;</code>
     */
    B_1W(14),
    /**
     * <code>B_1M = 15;</code>
     */
    B_1M(15),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>B_5Sec = 0;</code>
     */
    public static final int B_5Sec_VALUE = 0;
    /**
     * <code>B_1Min = 1;</code>
     */
    public static final int B_1Min_VALUE = 1;
    /**
     * <code>B_3Min = 2;</code>
     */
    public static final int B_3Min_VALUE = 2;
    /**
     * <code>B_5Min = 3;</code>
     */
    public static final int B_5Min_VALUE = 3;
    /**
     * <code>B_15Min = 4;</code>
     */
    public static final int B_15Min_VALUE = 4;
    /**
     * <code>B_30Min = 5;</code>
     */
    public static final int B_30Min_VALUE = 5;
    /**
     * <code>B_1H = 6;</code>
     */
    public static final int B_1H_VALUE = 6;
    /**
     * <code>B_2H = 7;</code>
     */
    public static final int B_2H_VALUE = 7;
    /**
     * <code>B_4H = 8;</code>
     */
    public static final int B_4H_VALUE = 8;
    /**
     * <code>B_6H = 9;</code>
     */
    public static final int B_6H_VALUE = 9;
    /**
     * <code>B_8H = 10;</code>
     */
    public static final int B_8H_VALUE = 10;
    /**
     * <code>B_12H = 11;</code>
     */
    public static final int B_12H_VALUE = 11;
    /**
     * <code>B_1Day = 12;</code>
     */
    public static final int B_1Day_VALUE = 12;
    /**
     * <code>B_3Day = 13;</code>
     */
    public static final int B_3Day_VALUE = 13;
    /**
     * <code>B_1W = 14;</code>
     */
    public static final int B_1W_VALUE = 14;
    /**
     * <code>B_1M = 15;</code>
     */
    public static final int B_1M_VALUE = 15;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BarCycleEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BarCycleEnum forNumber(int value) {
      switch (value) {
        case 0: return B_5Sec;
        case 1: return B_1Min;
        case 2: return B_3Min;
        case 3: return B_5Min;
        case 4: return B_15Min;
        case 5: return B_30Min;
        case 6: return B_1H;
        case 7: return B_2H;
        case 8: return B_4H;
        case 9: return B_6H;
        case 10: return B_8H;
        case 11: return B_12H;
        case 12: return B_1Day;
        case 13: return B_3Day;
        case 14: return B_1W;
        case 15: return B_1M;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BarCycleEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BarCycleEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BarCycleEnum>() {
            public BarCycleEnum findValueByNumber(int number) {
              return BarCycleEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(3);
    }

    private static final BarCycleEnum[] VALUES = values();

    public static BarCycleEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BarCycleEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.BarCycleEnum)
  }

  /**
   * <pre>
   * OptionsTypeEnum是一个期权类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.OptionsTypeEnum}
   */
  public enum OptionsTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>O_Unknown = 0;</code>
     */
    O_Unknown(0),
    /**
     * <pre>
     * 看涨
     * </pre>
     *
     * <code>O_CallOptions = 1;</code>
     */
    O_CallOptions(1),
    /**
     * <pre>
     * 看跌
     * </pre>
     *
     * <code>O_PutOptions = 2;</code>
     */
    O_PutOptions(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>O_Unknown = 0;</code>
     */
    public static final int O_Unknown_VALUE = 0;
    /**
     * <pre>
     * 看涨
     * </pre>
     *
     * <code>O_CallOptions = 1;</code>
     */
    public static final int O_CallOptions_VALUE = 1;
    /**
     * <pre>
     * 看跌
     * </pre>
     *
     * <code>O_PutOptions = 2;</code>
     */
    public static final int O_PutOptions_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OptionsTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OptionsTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return O_Unknown;
        case 1: return O_CallOptions;
        case 2: return O_PutOptions;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OptionsTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OptionsTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OptionsTypeEnum>() {
            public OptionsTypeEnum findValueByNumber(int number) {
              return OptionsTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(4);
    }

    private static final OptionsTypeEnum[] VALUES = values();

    public static OptionsTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OptionsTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.OptionsTypeEnum)
  }

  /**
   * <pre>
   * CombinationTypeEnum是一个组合类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.CombinationTypeEnum}
   */
  public enum CombinationTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>COMBT_Unknown = 0;</code>
     */
    COMBT_Unknown(0),
    /**
     * <pre>
     * 期货组合
     * </pre>
     *
     * <code>COMBT_Future = 1;</code>
     */
    COMBT_Future(1),
    /**
     * <pre>
     * 垂直价差BUL
     * </pre>
     *
     * <code>COMBT_BUL = 2;</code>
     */
    COMBT_BUL(2),
    /**
     * <pre>
     * 垂直价差BER
     * </pre>
     *
     * <code>COMBT_BER = 3;</code>
     */
    COMBT_BER(3),
    /**
     * <pre>
     * 跨式组合
     * </pre>
     *
     * <code>COMBT_STD = 4;</code>
     */
    COMBT_STD(4),
    /**
     * <pre>
     * 宽跨式组合
     * </pre>
     *
     * <code>COMBT_STG = 5;</code>
     */
    COMBT_STG(5),
    /**
     * <pre>
     * 备兑组合
     * </pre>
     *
     * <code>COMBT_PRT = 6;</code>
     */
    COMBT_PRT(6),
    /**
     * <pre>
     * 时间价差组合
     * </pre>
     *
     * <code>COMBT_CLD = 7;</code>
     */
    COMBT_CLD(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>COMBT_Unknown = 0;</code>
     */
    public static final int COMBT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 期货组合
     * </pre>
     *
     * <code>COMBT_Future = 1;</code>
     */
    public static final int COMBT_Future_VALUE = 1;
    /**
     * <pre>
     * 垂直价差BUL
     * </pre>
     *
     * <code>COMBT_BUL = 2;</code>
     */
    public static final int COMBT_BUL_VALUE = 2;
    /**
     * <pre>
     * 垂直价差BER
     * </pre>
     *
     * <code>COMBT_BER = 3;</code>
     */
    public static final int COMBT_BER_VALUE = 3;
    /**
     * <pre>
     * 跨式组合
     * </pre>
     *
     * <code>COMBT_STD = 4;</code>
     */
    public static final int COMBT_STD_VALUE = 4;
    /**
     * <pre>
     * 宽跨式组合
     * </pre>
     *
     * <code>COMBT_STG = 5;</code>
     */
    public static final int COMBT_STG_VALUE = 5;
    /**
     * <pre>
     * 备兑组合
     * </pre>
     *
     * <code>COMBT_PRT = 6;</code>
     */
    public static final int COMBT_PRT_VALUE = 6;
    /**
     * <pre>
     * 时间价差组合
     * </pre>
     *
     * <code>COMBT_CLD = 7;</code>
     */
    public static final int COMBT_CLD_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CombinationTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CombinationTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return COMBT_Unknown;
        case 1: return COMBT_Future;
        case 2: return COMBT_BUL;
        case 3: return COMBT_BER;
        case 4: return COMBT_STD;
        case 5: return COMBT_STG;
        case 6: return COMBT_PRT;
        case 7: return COMBT_CLD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CombinationTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CombinationTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CombinationTypeEnum>() {
            public CombinationTypeEnum findValueByNumber(int number) {
              return CombinationTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(5);
    }

    private static final CombinationTypeEnum[] VALUES = values();

    public static CombinationTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CombinationTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.CombinationTypeEnum)
  }

  /**
   * Protobuf enum {@code w3.exchange.pb.DirectionEnum}
   */
  public enum DirectionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>D_Unknown = 0;</code>
     */
    D_Unknown(0),
    /**
     * <pre>
     * 买
     * </pre>
     *
     * <code>D_Buy = 1;</code>
     */
    D_Buy(1),
    /**
     * <pre>
     * 卖
     * </pre>
     *
     * <code>D_Sell = 2;</code>
     */
    D_Sell(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>D_Unknown = 0;</code>
     */
    public static final int D_Unknown_VALUE = 0;
    /**
     * <pre>
     * 买
     * </pre>
     *
     * <code>D_Buy = 1;</code>
     */
    public static final int D_Buy_VALUE = 1;
    /**
     * <pre>
     * 卖
     * </pre>
     *
     * <code>D_Sell = 2;</code>
     */
    public static final int D_Sell_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DirectionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DirectionEnum forNumber(int value) {
      switch (value) {
        case 0: return D_Unknown;
        case 1: return D_Buy;
        case 2: return D_Sell;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DirectionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DirectionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DirectionEnum>() {
            public DirectionEnum findValueByNumber(int number) {
              return DirectionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(6);
    }

    private static final DirectionEnum[] VALUES = values();

    public static DirectionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DirectionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.DirectionEnum)
  }

  /**
   * <pre>
   * PositionTypeEnum是一个持仓类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.PositionTypeEnum}
   */
  public enum PositionTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PT_Unknown = 0;</code>
     */
    PT_Unknown(0),
    /**
     * <pre>
     * 净持仓
     * </pre>
     *
     * <code>PT_Net = 1;</code>
     */
    PT_Net(1),
    /**
     * <pre>
     * 综合持仓
     * </pre>
     *
     * <code>PT_Gross = 2;</code>
     */
    PT_Gross(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PT_Unknown = 0;</code>
     */
    public static final int PT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 净持仓
     * </pre>
     *
     * <code>PT_Net = 1;</code>
     */
    public static final int PT_Net_VALUE = 1;
    /**
     * <pre>
     * 综合持仓
     * </pre>
     *
     * <code>PT_Gross = 2;</code>
     */
    public static final int PT_Gross_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PositionTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PositionTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return PT_Unknown;
        case 1: return PT_Net;
        case 2: return PT_Gross;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PositionTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PositionTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PositionTypeEnum>() {
            public PositionTypeEnum findValueByNumber(int number) {
              return PositionTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(7);
    }

    private static final PositionTypeEnum[] VALUES = values();

    public static PositionTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PositionTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.PositionTypeEnum)
  }

  /**
   * <pre>
   * PositionDirectionEnum是一个持仓多空方向类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.PositionDirectionEnum}
   */
  public enum PositionDirectionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PD_Unknown = 0;</code>
     */
    PD_Unknown(0),
    /**
     * <pre>
     * 净
     * </pre>
     *
     * <code>PD_Net = 1;</code>
     */
    PD_Net(1),
    /**
     * <pre>
     * 多
     * </pre>
     *
     * <code>PD_Long = 2;</code>
     */
    PD_Long(2),
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>PD_Short = 3;</code>
     */
    PD_Short(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PD_Unknown = 0;</code>
     */
    public static final int PD_Unknown_VALUE = 0;
    /**
     * <pre>
     * 净
     * </pre>
     *
     * <code>PD_Net = 1;</code>
     */
    public static final int PD_Net_VALUE = 1;
    /**
     * <pre>
     * 多
     * </pre>
     *
     * <code>PD_Long = 2;</code>
     */
    public static final int PD_Long_VALUE = 2;
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>PD_Short = 3;</code>
     */
    public static final int PD_Short_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PositionDirectionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PositionDirectionEnum forNumber(int value) {
      switch (value) {
        case 0: return PD_Unknown;
        case 1: return PD_Net;
        case 2: return PD_Long;
        case 3: return PD_Short;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PositionDirectionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PositionDirectionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PositionDirectionEnum>() {
            public PositionDirectionEnum findValueByNumber(int number) {
              return PositionDirectionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(8);
    }

    private static final PositionDirectionEnum[] VALUES = values();

    public static PositionDirectionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PositionDirectionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.PositionDirectionEnum)
  }

  /**
   * <pre>
   * HedgeFlagEnum是一个投机套保标志类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.HedgeFlagEnum}
   */
  public enum HedgeFlagEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>HF_Unknown = 0;</code>
     */
    HF_Unknown(0),
    /**
     * <pre>
     * 投机
     * </pre>
     *
     * <code>HF_Speculation = 1;</code>
     */
    HF_Speculation(1),
    /**
     * <pre>
     * 套利
     * </pre>
     *
     * <code>HF_Arbitrage = 2;</code>
     */
    HF_Arbitrage(2),
    /**
     * <pre>
     * 套保
     * </pre>
     *
     * <code>HF_Hedge = 3;</code>
     */
    HF_Hedge(3),
    /**
     * <pre>
     * 做市商
     * </pre>
     *
     * <code>HF_MarketMaker = 4;</code>
     */
    HF_MarketMaker(4),
    /**
     * <pre>
     * 第一腿投机第二腿套保 大商所专用
     * </pre>
     *
     * <code>HF_SpecHedge = 5;</code>
     */
    HF_SpecHedge(5),
    /**
     * <pre>
     * 第一腿套保第二腿投机  大商所专用
     * </pre>
     *
     * <code>HF_HedgeSpec = 6;</code>
     */
    HF_HedgeSpec(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>HF_Unknown = 0;</code>
     */
    public static final int HF_Unknown_VALUE = 0;
    /**
     * <pre>
     * 投机
     * </pre>
     *
     * <code>HF_Speculation = 1;</code>
     */
    public static final int HF_Speculation_VALUE = 1;
    /**
     * <pre>
     * 套利
     * </pre>
     *
     * <code>HF_Arbitrage = 2;</code>
     */
    public static final int HF_Arbitrage_VALUE = 2;
    /**
     * <pre>
     * 套保
     * </pre>
     *
     * <code>HF_Hedge = 3;</code>
     */
    public static final int HF_Hedge_VALUE = 3;
    /**
     * <pre>
     * 做市商
     * </pre>
     *
     * <code>HF_MarketMaker = 4;</code>
     */
    public static final int HF_MarketMaker_VALUE = 4;
    /**
     * <pre>
     * 第一腿投机第二腿套保 大商所专用
     * </pre>
     *
     * <code>HF_SpecHedge = 5;</code>
     */
    public static final int HF_SpecHedge_VALUE = 5;
    /**
     * <pre>
     * 第一腿套保第二腿投机  大商所专用
     * </pre>
     *
     * <code>HF_HedgeSpec = 6;</code>
     */
    public static final int HF_HedgeSpec_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HedgeFlagEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HedgeFlagEnum forNumber(int value) {
      switch (value) {
        case 0: return HF_Unknown;
        case 1: return HF_Speculation;
        case 2: return HF_Arbitrage;
        case 3: return HF_Hedge;
        case 4: return HF_MarketMaker;
        case 5: return HF_SpecHedge;
        case 6: return HF_HedgeSpec;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HedgeFlagEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HedgeFlagEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HedgeFlagEnum>() {
            public HedgeFlagEnum findValueByNumber(int number) {
              return HedgeFlagEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(9);
    }

    private static final HedgeFlagEnum[] VALUES = values();

    public static HedgeFlagEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HedgeFlagEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.HedgeFlagEnum)
  }

  /**
   * <pre>
   * OrderStatusEnum是一个报单状态类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.OrderStatusEnum}
   */
  public enum OrderStatusEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OS_Unknown = 0;</code>
     */
    OS_Unknown(0),
    /**
     * <pre>
     * 全部成交
     * </pre>
     *
     * <code>OS_AllTraded = 1;</code>
     */
    OS_AllTraded(1),
    /**
     * <pre>
     * 部分成交还在队列中
     * </pre>
     *
     * <code>OS_PartTradedQueueing = 2;</code>
     */
    OS_PartTradedQueueing(2),
    /**
     * <pre>
     * 部分成交不在队列中
     * </pre>
     *
     * <code>OS_PartTradedNotQueueing = 3;</code>
     */
    OS_PartTradedNotQueueing(3),
    /**
     * <pre>
     * 未成交还在队列中
     * </pre>
     *
     * <code>OS_NoTradeQueueing = 4;</code>
     */
    OS_NoTradeQueueing(4),
    /**
     * <pre>
     * 未成交不在队列中
     * </pre>
     *
     * <code>OS_NoTradeNotQueueing = 5;</code>
     */
    OS_NoTradeNotQueueing(5),
    /**
     * <pre>
     * 撤单
     * </pre>
     *
     * <code>OS_Canceled = 6;</code>
     */
    OS_Canceled(6),
    /**
     * <pre>
     * 尚未触发
     * </pre>
     *
     * <code>OS_NotTouched = 7;</code>
     */
    OS_NotTouched(7),
    /**
     * <pre>
     * 已触发
     * </pre>
     *
     * <code>OS_Touched = 8;</code>
     */
    OS_Touched(8),
    /**
     * <pre>
     * 已拒绝
     * </pre>
     *
     * <code>OS_Rejected = 9;</code>
     */
    OS_Rejected(9),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OS_Unknown = 0;</code>
     */
    public static final int OS_Unknown_VALUE = 0;
    /**
     * <pre>
     * 全部成交
     * </pre>
     *
     * <code>OS_AllTraded = 1;</code>
     */
    public static final int OS_AllTraded_VALUE = 1;
    /**
     * <pre>
     * 部分成交还在队列中
     * </pre>
     *
     * <code>OS_PartTradedQueueing = 2;</code>
     */
    public static final int OS_PartTradedQueueing_VALUE = 2;
    /**
     * <pre>
     * 部分成交不在队列中
     * </pre>
     *
     * <code>OS_PartTradedNotQueueing = 3;</code>
     */
    public static final int OS_PartTradedNotQueueing_VALUE = 3;
    /**
     * <pre>
     * 未成交还在队列中
     * </pre>
     *
     * <code>OS_NoTradeQueueing = 4;</code>
     */
    public static final int OS_NoTradeQueueing_VALUE = 4;
    /**
     * <pre>
     * 未成交不在队列中
     * </pre>
     *
     * <code>OS_NoTradeNotQueueing = 5;</code>
     */
    public static final int OS_NoTradeNotQueueing_VALUE = 5;
    /**
     * <pre>
     * 撤单
     * </pre>
     *
     * <code>OS_Canceled = 6;</code>
     */
    public static final int OS_Canceled_VALUE = 6;
    /**
     * <pre>
     * 尚未触发
     * </pre>
     *
     * <code>OS_NotTouched = 7;</code>
     */
    public static final int OS_NotTouched_VALUE = 7;
    /**
     * <pre>
     * 已触发
     * </pre>
     *
     * <code>OS_Touched = 8;</code>
     */
    public static final int OS_Touched_VALUE = 8;
    /**
     * <pre>
     * 已拒绝
     * </pre>
     *
     * <code>OS_Rejected = 9;</code>
     */
    public static final int OS_Rejected_VALUE = 9;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderStatusEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderStatusEnum forNumber(int value) {
      switch (value) {
        case 0: return OS_Unknown;
        case 1: return OS_AllTraded;
        case 2: return OS_PartTradedQueueing;
        case 3: return OS_PartTradedNotQueueing;
        case 4: return OS_NoTradeQueueing;
        case 5: return OS_NoTradeNotQueueing;
        case 6: return OS_Canceled;
        case 7: return OS_NotTouched;
        case 8: return OS_Touched;
        case 9: return OS_Rejected;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderStatusEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderStatusEnum>() {
            public OrderStatusEnum findValueByNumber(int number) {
              return OrderStatusEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(10);
    }

    private static final OrderStatusEnum[] VALUES = values();

    public static OrderStatusEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderStatusEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.OrderStatusEnum)
  }

  /**
   * <pre>
   * OrderPriceTypeEnum是一个报单价格条件类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.OrderPriceTypeEnum}
   */
  public enum OrderPriceTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OPT_Unknown = 0;</code>
     */
    OPT_Unknown(0),
    /**
     * <pre>
     * 任意价
     * </pre>
     *
     * <code>OPT_AnyPrice = 1;</code>
     */
    OPT_AnyPrice(1),
    /**
     * <pre>
     * 限价
     * </pre>
     *
     * <code>OPT_LimitPrice = 2;</code>
     */
    OPT_LimitPrice(2),
    /**
     * <pre>
     * 最优价
     * </pre>
     *
     * <code>OPT_BestPrice = 3;</code>
     */
    OPT_BestPrice(3),
    /**
     * <pre>
     * 最新价
     * </pre>
     *
     * <code>OPT_LastPrice = 4;</code>
     */
    OPT_LastPrice(4),
    /**
     * <pre>
     * 最新价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusOneTicks = 5;</code>
     */
    OPT_LastPricePlusOneTicks(5),
    /**
     * <pre>
     * 最新价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusTwoTicks = 6;</code>
     */
    OPT_LastPricePlusTwoTicks(6),
    /**
     * <pre>
     * 最新价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusThreeTicks = 7;</code>
     */
    OPT_LastPricePlusThreeTicks(7),
    /**
     * <pre>
     * 卖一价
     * </pre>
     *
     * <code>OPT_AskPrice1 = 8;</code>
     */
    OPT_AskPrice1(8),
    /**
     * <pre>
     * 卖一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusOneTicks = 9;</code>
     */
    OPT_AskPrice1PlusOneTicks(9),
    /**
     * <pre>
     * 卖一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusTwoTicks = 10;</code>
     */
    OPT_AskPrice1PlusTwoTicks(10),
    /**
     * <pre>
     *  卖一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusThreeTicks = 11;</code>
     */
    OPT_AskPrice1PlusThreeTicks(11),
    /**
     * <pre>
     * 买一价
     * </pre>
     *
     * <code>OPT_BidPrice1 = 12;</code>
     */
    OPT_BidPrice1(12),
    /**
     * <pre>
     * 买一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusOneTicks = 13;</code>
     */
    OPT_BidPrice1PlusOneTicks(13),
    /**
     * <pre>
     * 买一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusTwoTicks = 14;</code>
     */
    OPT_BidPrice1PlusTwoTicks(14),
    /**
     * <pre>
     * 买一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusThreeTicks = 15;</code>
     */
    OPT_BidPrice1PlusThreeTicks(15),
    /**
     * <pre>
     * 五档价
     * </pre>
     *
     * <code>OPT_FiveLevelPrice = 16;</code>
     */
    OPT_FiveLevelPrice(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OPT_Unknown = 0;</code>
     */
    public static final int OPT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 任意价
     * </pre>
     *
     * <code>OPT_AnyPrice = 1;</code>
     */
    public static final int OPT_AnyPrice_VALUE = 1;
    /**
     * <pre>
     * 限价
     * </pre>
     *
     * <code>OPT_LimitPrice = 2;</code>
     */
    public static final int OPT_LimitPrice_VALUE = 2;
    /**
     * <pre>
     * 最优价
     * </pre>
     *
     * <code>OPT_BestPrice = 3;</code>
     */
    public static final int OPT_BestPrice_VALUE = 3;
    /**
     * <pre>
     * 最新价
     * </pre>
     *
     * <code>OPT_LastPrice = 4;</code>
     */
    public static final int OPT_LastPrice_VALUE = 4;
    /**
     * <pre>
     * 最新价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusOneTicks = 5;</code>
     */
    public static final int OPT_LastPricePlusOneTicks_VALUE = 5;
    /**
     * <pre>
     * 最新价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusTwoTicks = 6;</code>
     */
    public static final int OPT_LastPricePlusTwoTicks_VALUE = 6;
    /**
     * <pre>
     * 最新价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_LastPricePlusThreeTicks = 7;</code>
     */
    public static final int OPT_LastPricePlusThreeTicks_VALUE = 7;
    /**
     * <pre>
     * 卖一价
     * </pre>
     *
     * <code>OPT_AskPrice1 = 8;</code>
     */
    public static final int OPT_AskPrice1_VALUE = 8;
    /**
     * <pre>
     * 卖一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusOneTicks = 9;</code>
     */
    public static final int OPT_AskPrice1PlusOneTicks_VALUE = 9;
    /**
     * <pre>
     * 卖一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusTwoTicks = 10;</code>
     */
    public static final int OPT_AskPrice1PlusTwoTicks_VALUE = 10;
    /**
     * <pre>
     *  卖一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_AskPrice1PlusThreeTicks = 11;</code>
     */
    public static final int OPT_AskPrice1PlusThreeTicks_VALUE = 11;
    /**
     * <pre>
     * 买一价
     * </pre>
     *
     * <code>OPT_BidPrice1 = 12;</code>
     */
    public static final int OPT_BidPrice1_VALUE = 12;
    /**
     * <pre>
     * 买一价浮动上浮1个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusOneTicks = 13;</code>
     */
    public static final int OPT_BidPrice1PlusOneTicks_VALUE = 13;
    /**
     * <pre>
     * 买一价浮动上浮2个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusTwoTicks = 14;</code>
     */
    public static final int OPT_BidPrice1PlusTwoTicks_VALUE = 14;
    /**
     * <pre>
     * 买一价浮动上浮3个ticks
     * </pre>
     *
     * <code>OPT_BidPrice1PlusThreeTicks = 15;</code>
     */
    public static final int OPT_BidPrice1PlusThreeTicks_VALUE = 15;
    /**
     * <pre>
     * 五档价
     * </pre>
     *
     * <code>OPT_FiveLevelPrice = 16;</code>
     */
    public static final int OPT_FiveLevelPrice_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderPriceTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderPriceTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return OPT_Unknown;
        case 1: return OPT_AnyPrice;
        case 2: return OPT_LimitPrice;
        case 3: return OPT_BestPrice;
        case 4: return OPT_LastPrice;
        case 5: return OPT_LastPricePlusOneTicks;
        case 6: return OPT_LastPricePlusTwoTicks;
        case 7: return OPT_LastPricePlusThreeTicks;
        case 8: return OPT_AskPrice1;
        case 9: return OPT_AskPrice1PlusOneTicks;
        case 10: return OPT_AskPrice1PlusTwoTicks;
        case 11: return OPT_AskPrice1PlusThreeTicks;
        case 12: return OPT_BidPrice1;
        case 13: return OPT_BidPrice1PlusOneTicks;
        case 14: return OPT_BidPrice1PlusTwoTicks;
        case 15: return OPT_BidPrice1PlusThreeTicks;
        case 16: return OPT_FiveLevelPrice;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderPriceTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderPriceTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderPriceTypeEnum>() {
            public OrderPriceTypeEnum findValueByNumber(int number) {
              return OrderPriceTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(11);
    }

    private static final OrderPriceTypeEnum[] VALUES = values();

    public static OrderPriceTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderPriceTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.OrderPriceTypeEnum)
  }

  /**
   * <pre>
   * OffsetFlagEnum是一个开平标志类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.OffsetFlagEnum}
   */
  public enum OffsetFlagEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OF_Unknown = 0;</code>
     */
    OF_Unknown(0),
    /**
     * <pre>
     * 开仓
     * </pre>
     *
     * <code>OF_Open = 1;</code>
     */
    OF_Open(1),
    /**
     * <pre>
     * 平仓
     * </pre>
     *
     * <code>OF_Close = 2;</code>
     */
    OF_Close(2),
    /**
     * <pre>
     * 强平
     * </pre>
     *
     * <code>OF_ForceClose = 3;</code>
     */
    OF_ForceClose(3),
    /**
     * <pre>
     * 平今
     * </pre>
     *
     * <code>OF_CloseToday = 4;</code>
     */
    OF_CloseToday(4),
    /**
     * <pre>
     * 平昨
     * </pre>
     *
     * <code>OF_CloseYesterday = 5;</code>
     */
    OF_CloseYesterday(5),
    /**
     * <pre>
     * 强减
     * </pre>
     *
     * <code>OF_ForceOff = 6;</code>
     */
    OF_ForceOff(6),
    /**
     * <pre>
     * 本地强平
     * </pre>
     *
     * <code>OF_LocalForceClose = 7;</code>
     */
    OF_LocalForceClose(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OF_Unknown = 0;</code>
     */
    public static final int OF_Unknown_VALUE = 0;
    /**
     * <pre>
     * 开仓
     * </pre>
     *
     * <code>OF_Open = 1;</code>
     */
    public static final int OF_Open_VALUE = 1;
    /**
     * <pre>
     * 平仓
     * </pre>
     *
     * <code>OF_Close = 2;</code>
     */
    public static final int OF_Close_VALUE = 2;
    /**
     * <pre>
     * 强平
     * </pre>
     *
     * <code>OF_ForceClose = 3;</code>
     */
    public static final int OF_ForceClose_VALUE = 3;
    /**
     * <pre>
     * 平今
     * </pre>
     *
     * <code>OF_CloseToday = 4;</code>
     */
    public static final int OF_CloseToday_VALUE = 4;
    /**
     * <pre>
     * 平昨
     * </pre>
     *
     * <code>OF_CloseYesterday = 5;</code>
     */
    public static final int OF_CloseYesterday_VALUE = 5;
    /**
     * <pre>
     * 强减
     * </pre>
     *
     * <code>OF_ForceOff = 6;</code>
     */
    public static final int OF_ForceOff_VALUE = 6;
    /**
     * <pre>
     * 本地强平
     * </pre>
     *
     * <code>OF_LocalForceClose = 7;</code>
     */
    public static final int OF_LocalForceClose_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OffsetFlagEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OffsetFlagEnum forNumber(int value) {
      switch (value) {
        case 0: return OF_Unknown;
        case 1: return OF_Open;
        case 2: return OF_Close;
        case 3: return OF_ForceClose;
        case 4: return OF_CloseToday;
        case 5: return OF_CloseYesterday;
        case 6: return OF_ForceOff;
        case 7: return OF_LocalForceClose;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OffsetFlagEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OffsetFlagEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OffsetFlagEnum>() {
            public OffsetFlagEnum findValueByNumber(int number) {
              return OffsetFlagEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(12);
    }

    private static final OffsetFlagEnum[] VALUES = values();

    public static OffsetFlagEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OffsetFlagEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.OffsetFlagEnum)
  }

  /**
   * <pre>
   * ForceCloseReasonEnum是一个强平原因类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.ForceCloseReasonEnum}
   */
  public enum ForceCloseReasonEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>FCR_Unknown = 0;</code>
     */
    FCR_Unknown(0),
    /**
     * <pre>
     * 非强平
     * </pre>
     *
     * <code>FCR_NotForceClose = 1;</code>
     */
    FCR_NotForceClose(1),
    /**
     * <pre>
     * 资金不足
     * </pre>
     *
     * <code>FCR_LackDeposit = 2;</code>
     */
    FCR_LackDeposit(2),
    /**
     * <pre>
     * 客户超仓
     * </pre>
     *
     * <code>FCR_ClientOverPositionLimit = 3;</code>
     */
    FCR_ClientOverPositionLimit(3),
    /**
     * <pre>
     * 会员超仓
     * </pre>
     *
     * <code>FCR_MemberOverPositionLimit = 4;</code>
     */
    FCR_MemberOverPositionLimit(4),
    /**
     * <pre>
     * 持仓非整数倍
     * </pre>
     *
     * <code>FCR_NotMultiple = 5;</code>
     */
    FCR_NotMultiple(5),
    /**
     * <pre>
     * 违规
     * </pre>
     *
     * <code>FCR_Violation = 6;</code>
     */
    FCR_Violation(6),
    /**
     * <pre>
     * 其它
     * </pre>
     *
     * <code>FCR_Other = 7;</code>
     */
    FCR_Other(7),
    /**
     * <pre>
     * 自然人临近交割
     * </pre>
     *
     * <code>FCR_PersonDeliver = 8;</code>
     */
    FCR_PersonDeliver(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>FCR_Unknown = 0;</code>
     */
    public static final int FCR_Unknown_VALUE = 0;
    /**
     * <pre>
     * 非强平
     * </pre>
     *
     * <code>FCR_NotForceClose = 1;</code>
     */
    public static final int FCR_NotForceClose_VALUE = 1;
    /**
     * <pre>
     * 资金不足
     * </pre>
     *
     * <code>FCR_LackDeposit = 2;</code>
     */
    public static final int FCR_LackDeposit_VALUE = 2;
    /**
     * <pre>
     * 客户超仓
     * </pre>
     *
     * <code>FCR_ClientOverPositionLimit = 3;</code>
     */
    public static final int FCR_ClientOverPositionLimit_VALUE = 3;
    /**
     * <pre>
     * 会员超仓
     * </pre>
     *
     * <code>FCR_MemberOverPositionLimit = 4;</code>
     */
    public static final int FCR_MemberOverPositionLimit_VALUE = 4;
    /**
     * <pre>
     * 持仓非整数倍
     * </pre>
     *
     * <code>FCR_NotMultiple = 5;</code>
     */
    public static final int FCR_NotMultiple_VALUE = 5;
    /**
     * <pre>
     * 违规
     * </pre>
     *
     * <code>FCR_Violation = 6;</code>
     */
    public static final int FCR_Violation_VALUE = 6;
    /**
     * <pre>
     * 其它
     * </pre>
     *
     * <code>FCR_Other = 7;</code>
     */
    public static final int FCR_Other_VALUE = 7;
    /**
     * <pre>
     * 自然人临近交割
     * </pre>
     *
     * <code>FCR_PersonDeliver = 8;</code>
     */
    public static final int FCR_PersonDeliver_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ForceCloseReasonEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ForceCloseReasonEnum forNumber(int value) {
      switch (value) {
        case 0: return FCR_Unknown;
        case 1: return FCR_NotForceClose;
        case 2: return FCR_LackDeposit;
        case 3: return FCR_ClientOverPositionLimit;
        case 4: return FCR_MemberOverPositionLimit;
        case 5: return FCR_NotMultiple;
        case 6: return FCR_Violation;
        case 7: return FCR_Other;
        case 8: return FCR_PersonDeliver;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ForceCloseReasonEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ForceCloseReasonEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ForceCloseReasonEnum>() {
            public ForceCloseReasonEnum findValueByNumber(int number) {
              return ForceCloseReasonEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(13);
    }

    private static final ForceCloseReasonEnum[] VALUES = values();

    public static ForceCloseReasonEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ForceCloseReasonEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.ForceCloseReasonEnum)
  }

  /**
   * <pre>
   * OrderTypeEnum是一个报单类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.OrderTypeEnum}
   */
  public enum OrderTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OT_Unknown = 0;</code>
     */
    OT_Unknown(0),
    /**
     * <pre>
     * 正常
     * </pre>
     *
     * <code>OT_Normal = 1;</code>
     */
    OT_Normal(1),
    /**
     * <pre>
     * 报价衍生
     * </pre>
     *
     * <code>OT_DeriveFromQuote = 2;</code>
     */
    OT_DeriveFromQuote(2),
    /**
     * <pre>
     * 组合衍生
     * </pre>
     *
     * <code>OT_DeriveFromCombination = 3;</code>
     */
    OT_DeriveFromCombination(3),
    /**
     * <pre>
     * 组合报单
     * </pre>
     *
     * <code>OT_Combination = 4;</code>
     */
    OT_Combination(4),
    /**
     * <pre>
     * 条件单
     * </pre>
     *
     * <code>OT_ConditionalOrder = 5;</code>
     */
    OT_ConditionalOrder(5),
    /**
     * <pre>
     * 互换单
     * </pre>
     *
     * <code>OT_Swap = 6;</code>
     */
    OT_Swap(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>OT_Unknown = 0;</code>
     */
    public static final int OT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 正常
     * </pre>
     *
     * <code>OT_Normal = 1;</code>
     */
    public static final int OT_Normal_VALUE = 1;
    /**
     * <pre>
     * 报价衍生
     * </pre>
     *
     * <code>OT_DeriveFromQuote = 2;</code>
     */
    public static final int OT_DeriveFromQuote_VALUE = 2;
    /**
     * <pre>
     * 组合衍生
     * </pre>
     *
     * <code>OT_DeriveFromCombination = 3;</code>
     */
    public static final int OT_DeriveFromCombination_VALUE = 3;
    /**
     * <pre>
     * 组合报单
     * </pre>
     *
     * <code>OT_Combination = 4;</code>
     */
    public static final int OT_Combination_VALUE = 4;
    /**
     * <pre>
     * 条件单
     * </pre>
     *
     * <code>OT_ConditionalOrder = 5;</code>
     */
    public static final int OT_ConditionalOrder_VALUE = 5;
    /**
     * <pre>
     * 互换单
     * </pre>
     *
     * <code>OT_Swap = 6;</code>
     */
    public static final int OT_Swap_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OrderTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static OrderTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return OT_Unknown;
        case 1: return OT_Normal;
        case 2: return OT_DeriveFromQuote;
        case 3: return OT_DeriveFromCombination;
        case 4: return OT_Combination;
        case 5: return OT_ConditionalOrder;
        case 6: return OT_Swap;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OrderTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OrderTypeEnum>() {
            public OrderTypeEnum findValueByNumber(int number) {
              return OrderTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(14);
    }

    private static final OrderTypeEnum[] VALUES = values();

    public static OrderTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OrderTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.OrderTypeEnum)
  }

  /**
   * <pre>
   * TimeConditionEnum是一个有效期类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.TimeConditionEnum}
   */
  public enum TimeConditionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TC_Unknown = 0;</code>
     */
    TC_Unknown(0),
    /**
     * <pre>
     * 立即完成，否则撤销
     * </pre>
     *
     * <code>TC_IOC = 1;</code>
     */
    TC_IOC(1),
    /**
     * <pre>
     * 本节有效
     * </pre>
     *
     * <code>TC_GFS = 2;</code>
     */
    TC_GFS(2),
    /**
     * <pre>
     * 当日有效
     * </pre>
     *
     * <code>TC_GFD = 3;</code>
     */
    TC_GFD(3),
    /**
     * <pre>
     * 指定日期前有效
     * </pre>
     *
     * <code>TC_GTD = 4;</code>
     */
    TC_GTD(4),
    /**
     * <pre>
     * 撤销前有效
     * </pre>
     *
     * <code>TC_GTC = 5;</code>
     */
    TC_GTC(5),
    /**
     * <pre>
     * 集合竞价有效
     * </pre>
     *
     * <code>TC_GFA = 6;</code>
     */
    TC_GFA(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TC_Unknown = 0;</code>
     */
    public static final int TC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 立即完成，否则撤销
     * </pre>
     *
     * <code>TC_IOC = 1;</code>
     */
    public static final int TC_IOC_VALUE = 1;
    /**
     * <pre>
     * 本节有效
     * </pre>
     *
     * <code>TC_GFS = 2;</code>
     */
    public static final int TC_GFS_VALUE = 2;
    /**
     * <pre>
     * 当日有效
     * </pre>
     *
     * <code>TC_GFD = 3;</code>
     */
    public static final int TC_GFD_VALUE = 3;
    /**
     * <pre>
     * 指定日期前有效
     * </pre>
     *
     * <code>TC_GTD = 4;</code>
     */
    public static final int TC_GTD_VALUE = 4;
    /**
     * <pre>
     * 撤销前有效
     * </pre>
     *
     * <code>TC_GTC = 5;</code>
     */
    public static final int TC_GTC_VALUE = 5;
    /**
     * <pre>
     * 集合竞价有效
     * </pre>
     *
     * <code>TC_GFA = 6;</code>
     */
    public static final int TC_GFA_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TimeConditionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TimeConditionEnum forNumber(int value) {
      switch (value) {
        case 0: return TC_Unknown;
        case 1: return TC_IOC;
        case 2: return TC_GFS;
        case 3: return TC_GFD;
        case 4: return TC_GTD;
        case 5: return TC_GTC;
        case 6: return TC_GFA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TimeConditionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TimeConditionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TimeConditionEnum>() {
            public TimeConditionEnum findValueByNumber(int number) {
              return TimeConditionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(15);
    }

    private static final TimeConditionEnum[] VALUES = values();

    public static TimeConditionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TimeConditionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.TimeConditionEnum)
  }

  /**
   * <pre>
   * VolumeConditionEnum是一个成交量类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.VolumeConditionEnum}
   */
  public enum VolumeConditionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>VC_Unknown = 0;</code>
     */
    VC_Unknown(0),
    /**
     * <pre>
     * 任何数量
     * </pre>
     *
     * <code>VC_AV = 1;</code>
     */
    VC_AV(1),
    /**
     * <pre>
     * 最小数量
     * </pre>
     *
     * <code>VC_MV = 2;</code>
     */
    VC_MV(2),
    /**
     * <pre>
     * 全部数量
     * </pre>
     *
     * <code>VC_CV = 3;</code>
     */
    VC_CV(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>VC_Unknown = 0;</code>
     */
    public static final int VC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 任何数量
     * </pre>
     *
     * <code>VC_AV = 1;</code>
     */
    public static final int VC_AV_VALUE = 1;
    /**
     * <pre>
     * 最小数量
     * </pre>
     *
     * <code>VC_MV = 2;</code>
     */
    public static final int VC_MV_VALUE = 2;
    /**
     * <pre>
     * 全部数量
     * </pre>
     *
     * <code>VC_CV = 3;</code>
     */
    public static final int VC_CV_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VolumeConditionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static VolumeConditionEnum forNumber(int value) {
      switch (value) {
        case 0: return VC_Unknown;
        case 1: return VC_AV;
        case 2: return VC_MV;
        case 3: return VC_CV;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<VolumeConditionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        VolumeConditionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<VolumeConditionEnum>() {
            public VolumeConditionEnum findValueByNumber(int number) {
              return VolumeConditionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(16);
    }

    private static final VolumeConditionEnum[] VALUES = values();

    public static VolumeConditionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private VolumeConditionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.VolumeConditionEnum)
  }

  /**
   * <pre>
   * ContingentConditionEnum是一个触发条件类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.ContingentConditionEnum}
   */
  public enum ContingentConditionEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>CC_Unknown = 0;</code>
     */
    CC_Unknown(0),
    /**
     * <pre>
     * 立即
     * </pre>
     *
     * <code>CC_Immediately = 1;</code>
     */
    CC_Immediately(1),
    /**
     * <pre>
     * 止损
     * </pre>
     *
     * <code>CC_Touch = 2;</code>
     */
    CC_Touch(2),
    /**
     * <pre>
     * 止赢
     * </pre>
     *
     * <code>CC_TouchProfit = 3;</code>
     */
    CC_TouchProfit(3),
    /**
     * <pre>
     * 预埋单
     * </pre>
     *
     * <code>CC_ParkedOrder = 4;</code>
     */
    CC_ParkedOrder(4),
    /**
     * <pre>
     * 最新价大于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterThanStopPrice = 5;</code>
     */
    CC_LastPriceGreaterThanStopPrice(5),
    /**
     * <pre>
     * 最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterEqualStopPrice = 6;</code>
     */
    CC_LastPriceGreaterEqualStopPrice(6),
    /**
     * <pre>
     * 最新价小于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserThanStopPrice = 7;</code>
     */
    CC_LastPriceLesserThanStopPrice(7),
    /**
     * <pre>
     * 最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserEqualStopPrice = 8;</code>
     */
    CC_LastPriceLesserEqualStopPrice(8),
    /**
     * <pre>
     * 卖一价大于条件价
     * </pre>
     *
     * <code>CC_AskPriceGreaterThanStopPrice = 9;</code>
     */
    CC_AskPriceGreaterThanStopPrice(9),
    /**
     * <pre>
     * 卖一价大于等于条件价
     * </pre>
     *
     * <code>CC_AskPriceGreaterEqualStopPrice = 10;</code>
     */
    CC_AskPriceGreaterEqualStopPrice(10),
    /**
     * <pre>
     * 卖一价小于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserThanStopPrice = 11;</code>
     */
    CC_AskPriceLesserThanStopPrice(11),
    /**
     * <pre>
     * 卖一价小于等于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserEqualStopPrice = 12;</code>
     */
    CC_AskPriceLesserEqualStopPrice(12),
    /**
     * <pre>
     * 买一价大于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterThanStopPrice = 13;</code>
     */
    CC_BidPriceGreaterThanStopPrice(13),
    /**
     * <pre>
     * 买一价大于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterEqualStopPrice = 14;</code>
     */
    CC_BidPriceGreaterEqualStopPrice(14),
    /**
     * <pre>
     * 买一价小于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserThanStopPrice = 15;</code>
     */
    CC_BidPriceLesserThanStopPrice(15),
    /**
     * <pre>
     * 买一价小于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserEqualStopPrice = 16;</code>
     */
    CC_BidPriceLesserEqualStopPrice(16),
    /**
     * <pre>
     * (本地)最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceLesserEqualStopPrice = 17;</code>
     */
    CC_LocalLastPriceLesserEqualStopPrice(17),
    /**
     * <pre>
     * (本地)最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceGreaterEqualStopPrice = 18;</code>
     */
    CC_LocalLastPriceGreaterEqualStopPrice(18),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>CC_Unknown = 0;</code>
     */
    public static final int CC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 立即
     * </pre>
     *
     * <code>CC_Immediately = 1;</code>
     */
    public static final int CC_Immediately_VALUE = 1;
    /**
     * <pre>
     * 止损
     * </pre>
     *
     * <code>CC_Touch = 2;</code>
     */
    public static final int CC_Touch_VALUE = 2;
    /**
     * <pre>
     * 止赢
     * </pre>
     *
     * <code>CC_TouchProfit = 3;</code>
     */
    public static final int CC_TouchProfit_VALUE = 3;
    /**
     * <pre>
     * 预埋单
     * </pre>
     *
     * <code>CC_ParkedOrder = 4;</code>
     */
    public static final int CC_ParkedOrder_VALUE = 4;
    /**
     * <pre>
     * 最新价大于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterThanStopPrice = 5;</code>
     */
    public static final int CC_LastPriceGreaterThanStopPrice_VALUE = 5;
    /**
     * <pre>
     * 最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceGreaterEqualStopPrice = 6;</code>
     */
    public static final int CC_LastPriceGreaterEqualStopPrice_VALUE = 6;
    /**
     * <pre>
     * 最新价小于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserThanStopPrice = 7;</code>
     */
    public static final int CC_LastPriceLesserThanStopPrice_VALUE = 7;
    /**
     * <pre>
     * 最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LastPriceLesserEqualStopPrice = 8;</code>
     */
    public static final int CC_LastPriceLesserEqualStopPrice_VALUE = 8;
    /**
     * <pre>
     * 卖一价大于条件价
     * </pre>
     *
     * <code>CC_AskPriceGreaterThanStopPrice = 9;</code>
     */
    public static final int CC_AskPriceGreaterThanStopPrice_VALUE = 9;
    /**
     * <pre>
     * 卖一价大于等于条件价
     * </pre>
     *
     * <code>CC_AskPriceGreaterEqualStopPrice = 10;</code>
     */
    public static final int CC_AskPriceGreaterEqualStopPrice_VALUE = 10;
    /**
     * <pre>
     * 卖一价小于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserThanStopPrice = 11;</code>
     */
    public static final int CC_AskPriceLesserThanStopPrice_VALUE = 11;
    /**
     * <pre>
     * 卖一价小于等于条件价
     * </pre>
     *
     * <code>CC_AskPriceLesserEqualStopPrice = 12;</code>
     */
    public static final int CC_AskPriceLesserEqualStopPrice_VALUE = 12;
    /**
     * <pre>
     * 买一价大于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterThanStopPrice = 13;</code>
     */
    public static final int CC_BidPriceGreaterThanStopPrice_VALUE = 13;
    /**
     * <pre>
     * 买一价大于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceGreaterEqualStopPrice = 14;</code>
     */
    public static final int CC_BidPriceGreaterEqualStopPrice_VALUE = 14;
    /**
     * <pre>
     * 买一价小于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserThanStopPrice = 15;</code>
     */
    public static final int CC_BidPriceLesserThanStopPrice_VALUE = 15;
    /**
     * <pre>
     * 买一价小于等于条件价
     * </pre>
     *
     * <code>CC_BidPriceLesserEqualStopPrice = 16;</code>
     */
    public static final int CC_BidPriceLesserEqualStopPrice_VALUE = 16;
    /**
     * <pre>
     * (本地)最新价小于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceLesserEqualStopPrice = 17;</code>
     */
    public static final int CC_LocalLastPriceLesserEqualStopPrice_VALUE = 17;
    /**
     * <pre>
     * (本地)最新价大于等于条件价
     * </pre>
     *
     * <code>CC_LocalLastPriceGreaterEqualStopPrice = 18;</code>
     */
    public static final int CC_LocalLastPriceGreaterEqualStopPrice_VALUE = 18;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ContingentConditionEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ContingentConditionEnum forNumber(int value) {
      switch (value) {
        case 0: return CC_Unknown;
        case 1: return CC_Immediately;
        case 2: return CC_Touch;
        case 3: return CC_TouchProfit;
        case 4: return CC_ParkedOrder;
        case 5: return CC_LastPriceGreaterThanStopPrice;
        case 6: return CC_LastPriceGreaterEqualStopPrice;
        case 7: return CC_LastPriceLesserThanStopPrice;
        case 8: return CC_LastPriceLesserEqualStopPrice;
        case 9: return CC_AskPriceGreaterThanStopPrice;
        case 10: return CC_AskPriceGreaterEqualStopPrice;
        case 11: return CC_AskPriceLesserThanStopPrice;
        case 12: return CC_AskPriceLesserEqualStopPrice;
        case 13: return CC_BidPriceGreaterThanStopPrice;
        case 14: return CC_BidPriceGreaterEqualStopPrice;
        case 15: return CC_BidPriceLesserThanStopPrice;
        case 16: return CC_BidPriceLesserEqualStopPrice;
        case 17: return CC_LocalLastPriceLesserEqualStopPrice;
        case 18: return CC_LocalLastPriceGreaterEqualStopPrice;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ContingentConditionEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ContingentConditionEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ContingentConditionEnum>() {
            public ContingentConditionEnum findValueByNumber(int number) {
              return ContingentConditionEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(17);
    }

    private static final ContingentConditionEnum[] VALUES = values();

    public static ContingentConditionEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ContingentConditionEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.ContingentConditionEnum)
  }

  /**
   * <pre>
   * TradeTypeEnum是一个成交类型类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.TradeTypeEnum}
   */
  public enum TradeTypeEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TT_Unknown = 0;</code>
     */
    TT_Unknown(0),
    /**
     * <pre>
     * 组合持仓拆分为单一持仓,初始化不应包含该类型的持仓
     * </pre>
     *
     * <code>TT_SplitCombination = 1;</code>
     */
    TT_SplitCombination(1),
    /**
     * <pre>
     * 普通成交
     * </pre>
     *
     * <code>TT_Common = 2;</code>
     */
    TT_Common(2),
    /**
     * <pre>
     * 期权执行
     * </pre>
     *
     * <code>TT_OptionsExecution = 3;</code>
     */
    TT_OptionsExecution(3),
    /**
     * <pre>
     * OTC成交
     * </pre>
     *
     * <code>TT_OTC = 4;</code>
     */
    TT_OTC(4),
    /**
     * <pre>
     * 期转现衍生成交
     * </pre>
     *
     * <code>TT_EFPDerived = 5;</code>
     */
    TT_EFPDerived(5),
    /**
     * <pre>
     * 组合衍生成交
     * </pre>
     *
     * <code>TT_CombinationDerived = 6;</code>
     */
    TT_CombinationDerived(6),
    /**
     * <pre>
     * 大宗交易成交
     * </pre>
     *
     * <code>TT_BlockTrade = 7;</code>
     */
    TT_BlockTrade(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>TT_Unknown = 0;</code>
     */
    public static final int TT_Unknown_VALUE = 0;
    /**
     * <pre>
     * 组合持仓拆分为单一持仓,初始化不应包含该类型的持仓
     * </pre>
     *
     * <code>TT_SplitCombination = 1;</code>
     */
    public static final int TT_SplitCombination_VALUE = 1;
    /**
     * <pre>
     * 普通成交
     * </pre>
     *
     * <code>TT_Common = 2;</code>
     */
    public static final int TT_Common_VALUE = 2;
    /**
     * <pre>
     * 期权执行
     * </pre>
     *
     * <code>TT_OptionsExecution = 3;</code>
     */
    public static final int TT_OptionsExecution_VALUE = 3;
    /**
     * <pre>
     * OTC成交
     * </pre>
     *
     * <code>TT_OTC = 4;</code>
     */
    public static final int TT_OTC_VALUE = 4;
    /**
     * <pre>
     * 期转现衍生成交
     * </pre>
     *
     * <code>TT_EFPDerived = 5;</code>
     */
    public static final int TT_EFPDerived_VALUE = 5;
    /**
     * <pre>
     * 组合衍生成交
     * </pre>
     *
     * <code>TT_CombinationDerived = 6;</code>
     */
    public static final int TT_CombinationDerived_VALUE = 6;
    /**
     * <pre>
     * 大宗交易成交
     * </pre>
     *
     * <code>TT_BlockTrade = 7;</code>
     */
    public static final int TT_BlockTrade_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TradeTypeEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TradeTypeEnum forNumber(int value) {
      switch (value) {
        case 0: return TT_Unknown;
        case 1: return TT_SplitCombination;
        case 2: return TT_Common;
        case 3: return TT_OptionsExecution;
        case 4: return TT_OTC;
        case 5: return TT_EFPDerived;
        case 6: return TT_CombinationDerived;
        case 7: return TT_BlockTrade;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TradeTypeEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TradeTypeEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TradeTypeEnum>() {
            public TradeTypeEnum findValueByNumber(int number) {
              return TradeTypeEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(18);
    }

    private static final TradeTypeEnum[] VALUES = values();

    public static TradeTypeEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TradeTypeEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.TradeTypeEnum)
  }

  /**
   * <pre>
   * PriceSourceEnum是一个成交价来源类型
   * </pre>
   *
   * Protobuf enum {@code w3.exchange.pb.PriceSourceEnum}
   */
  public enum PriceSourceEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PSRC_Unknown = 0;</code>
     */
    PSRC_Unknown(0),
    /**
     * <pre>
     * 前成交价
     * </pre>
     *
     * <code>PSRC_LastPrice = 1;</code>
     */
    PSRC_LastPrice(1),
    /**
     * <pre>
     * 买委托价
     * </pre>
     *
     * <code>PSRC_Buy = 2;</code>
     */
    PSRC_Buy(2),
    /**
     * <pre>
     * 卖委托价
     * </pre>
     *
     * <code>PSRC_Sell = 3;</code>
     */
    PSRC_Sell(3),
    /**
     * <pre>
     * 场外成交价
     * </pre>
     *
     * <code>PSRC_OTC = 4;</code>
     */
    PSRC_OTC(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>PSRC_Unknown = 0;</code>
     */
    public static final int PSRC_Unknown_VALUE = 0;
    /**
     * <pre>
     * 前成交价
     * </pre>
     *
     * <code>PSRC_LastPrice = 1;</code>
     */
    public static final int PSRC_LastPrice_VALUE = 1;
    /**
     * <pre>
     * 买委托价
     * </pre>
     *
     * <code>PSRC_Buy = 2;</code>
     */
    public static final int PSRC_Buy_VALUE = 2;
    /**
     * <pre>
     * 卖委托价
     * </pre>
     *
     * <code>PSRC_Sell = 3;</code>
     */
    public static final int PSRC_Sell_VALUE = 3;
    /**
     * <pre>
     * 场外成交价
     * </pre>
     *
     * <code>PSRC_OTC = 4;</code>
     */
    public static final int PSRC_OTC_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PriceSourceEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PriceSourceEnum forNumber(int value) {
      switch (value) {
        case 0: return PSRC_Unknown;
        case 1: return PSRC_LastPrice;
        case 2: return PSRC_Buy;
        case 3: return PSRC_Sell;
        case 4: return PSRC_OTC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PriceSourceEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PriceSourceEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PriceSourceEnum>() {
            public PriceSourceEnum findValueByNumber(int number) {
              return PriceSourceEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return w3.exchange.pb.W3CoreEnum.getDescriptor().getEnumTypes().get(19);
    }

    private static final PriceSourceEnum[] VALUES = values();

    public static PriceSourceEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PriceSourceEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:w3.exchange.pb.PriceSourceEnum)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!w3/exchange/pb/w3_core_enum.proto\022\016w3." +
      "exchange.pb*d\n\020ProductClassEnum\022\027\n\023Unkno" +
      "wnProductClass\020\000\022\010\n\004SPOT\020\001\022\n\n\006MARGIN\020\002\022\010" +
      "\n\004SWAP\020\003\022\013\n\007FUTURES\020\004\022\n\n\006OPTION\020\005*A\n\014Cur" +
      "rencyEnum\022\023\n\017UnknownCurrency\020\000\022\010\n\004USDT\020\001" +
      "\022\010\n\004BUSD\020\002\022\010\n\004USDC\020\003*C\n\014ExchangeEnum\022\023\n\017" +
      "UnknownExchange\020\000\022\013\n\007BINANCE\020\001\022\007\n\003OKX\020\002\022" +
      "\010\n\004GATE\020\003*\301\001\n\014BarCycleEnum\022\n\n\006B_5Sec\020\000\022\n" +
      "\n\006B_1Min\020\001\022\n\n\006B_3Min\020\002\022\n\n\006B_5Min\020\003\022\013\n\007B_" +
      "15Min\020\004\022\013\n\007B_30Min\020\005\022\010\n\004B_1H\020\006\022\010\n\004B_2H\020\007" +
      "\022\010\n\004B_4H\020\010\022\010\n\004B_6H\020\t\022\010\n\004B_8H\020\n\022\t\n\005B_12H\020" +
      "\013\022\n\n\006B_1Day\020\014\022\n\n\006B_3Day\020\r\022\010\n\004B_1W\020\016\022\010\n\004B" +
      "_1M\020\017*E\n\017OptionsTypeEnum\022\r\n\tO_Unknown\020\000\022" +
      "\021\n\rO_CallOptions\020\001\022\020\n\014O_PutOptions\020\002*\224\001\n" +
      "\023CombinationTypeEnum\022\021\n\rCOMBT_Unknown\020\000\022" +
      "\020\n\014COMBT_Future\020\001\022\r\n\tCOMBT_BUL\020\002\022\r\n\tCOMB" +
      "T_BER\020\003\022\r\n\tCOMBT_STD\020\004\022\r\n\tCOMBT_STG\020\005\022\r\n" +
      "\tCOMBT_PRT\020\006\022\r\n\tCOMBT_CLD\020\007*5\n\rDirection" +
      "Enum\022\r\n\tD_Unknown\020\000\022\t\n\005D_Buy\020\001\022\n\n\006D_Sell" +
      "\020\002*<\n\020PositionTypeEnum\022\016\n\nPT_Unknown\020\000\022\n" +
      "\n\006PT_Net\020\001\022\014\n\010PT_Gross\020\002*N\n\025PositionDire" +
      "ctionEnum\022\016\n\nPD_Unknown\020\000\022\n\n\006PD_Net\020\001\022\013\n" +
      "\007PD_Long\020\002\022\014\n\010PD_Short\020\003*\213\001\n\rHedgeFlagEn" +
      "um\022\016\n\nHF_Unknown\020\000\022\022\n\016HF_Speculation\020\001\022\020" +
      "\n\014HF_Arbitrage\020\002\022\014\n\010HF_Hedge\020\003\022\022\n\016HF_Mar" +
      "ketMaker\020\004\022\020\n\014HF_SpecHedge\020\005\022\020\n\014HF_Hedge" +
      "Spec\020\006*\344\001\n\017OrderStatusEnum\022\016\n\nOS_Unknown" +
      "\020\000\022\020\n\014OS_AllTraded\020\001\022\031\n\025OS_PartTradedQue" +
      "ueing\020\002\022\034\n\030OS_PartTradedNotQueueing\020\003\022\026\n" +
      "\022OS_NoTradeQueueing\020\004\022\031\n\025OS_NoTradeNotQu" +
      "eueing\020\005\022\017\n\013OS_Canceled\020\006\022\021\n\rOS_NotTouch" +
      "ed\020\007\022\016\n\nOS_Touched\020\010\022\017\n\013OS_Rejected\020\t*\314\003" +
      "\n\022OrderPriceTypeEnum\022\017\n\013OPT_Unknown\020\000\022\020\n" +
      "\014OPT_AnyPrice\020\001\022\022\n\016OPT_LimitPrice\020\002\022\021\n\rO" +
      "PT_BestPrice\020\003\022\021\n\rOPT_LastPrice\020\004\022\035\n\031OPT" +
      "_LastPricePlusOneTicks\020\005\022\035\n\031OPT_LastPric" +
      "ePlusTwoTicks\020\006\022\037\n\033OPT_LastPricePlusThre" +
      "eTicks\020\007\022\021\n\rOPT_AskPrice1\020\010\022\035\n\031OPT_AskPr" +
      "ice1PlusOneTicks\020\t\022\035\n\031OPT_AskPrice1PlusT" +
      "woTicks\020\n\022\037\n\033OPT_AskPrice1PlusThreeTicks" +
      "\020\013\022\021\n\rOPT_BidPrice1\020\014\022\035\n\031OPT_BidPrice1Pl" +
      "usOneTicks\020\r\022\035\n\031OPT_BidPrice1PlusTwoTick" +
      "s\020\016\022\037\n\033OPT_BidPrice1PlusThreeTicks\020\017\022\026\n\022" +
      "OPT_FiveLevelPrice\020\020*\241\001\n\016OffsetFlagEnum\022" +
      "\016\n\nOF_Unknown\020\000\022\013\n\007OF_Open\020\001\022\014\n\010OF_Close" +
      "\020\002\022\021\n\rOF_ForceClose\020\003\022\021\n\rOF_CloseToday\020\004" +
      "\022\025\n\021OF_CloseYesterday\020\005\022\017\n\013OF_ForceOff\020\006" +
      "\022\026\n\022OF_LocalForceClose\020\007*\343\001\n\024ForceCloseR" +
      "easonEnum\022\017\n\013FCR_Unknown\020\000\022\025\n\021FCR_NotFor" +
      "ceClose\020\001\022\023\n\017FCR_LackDeposit\020\002\022\037\n\033FCR_Cl" +
      "ientOverPositionLimit\020\003\022\037\n\033FCR_MemberOve" +
      "rPositionLimit\020\004\022\023\n\017FCR_NotMultiple\020\005\022\021\n" +
      "\rFCR_Violation\020\006\022\r\n\tFCR_Other\020\007\022\025\n\021FCR_P" +
      "ersonDeliver\020\010*\236\001\n\rOrderTypeEnum\022\016\n\nOT_U" +
      "nknown\020\000\022\r\n\tOT_Normal\020\001\022\026\n\022OT_DeriveFrom" +
      "Quote\020\002\022\034\n\030OT_DeriveFromCombination\020\003\022\022\n" +
      "\016OT_Combination\020\004\022\027\n\023OT_ConditionalOrder" +
      "\020\005\022\013\n\007OT_Swap\020\006*k\n\021TimeConditionEnum\022\016\n\n" +
      "TC_Unknown\020\000\022\n\n\006TC_IOC\020\001\022\n\n\006TC_GFS\020\002\022\n\n\006" +
      "TC_GFD\020\003\022\n\n\006TC_GTD\020\004\022\n\n\006TC_GTC\020\005\022\n\n\006TC_G" +
      "FA\020\006*F\n\023VolumeConditionEnum\022\016\n\nVC_Unknow" +
      "n\020\000\022\t\n\005VC_AV\020\001\022\t\n\005VC_MV\020\002\022\t\n\005VC_CV\020\003*\212\005\n" +
      "\027ContingentConditionEnum\022\016\n\nCC_Unknown\020\000" +
      "\022\022\n\016CC_Immediately\020\001\022\014\n\010CC_Touch\020\002\022\022\n\016CC" +
      "_TouchProfit\020\003\022\022\n\016CC_ParkedOrder\020\004\022$\n CC" +
      "_LastPriceGreaterThanStopPrice\020\005\022%\n!CC_L" +
      "astPriceGreaterEqualStopPrice\020\006\022#\n\037CC_La" +
      "stPriceLesserThanStopPrice\020\007\022$\n CC_LastP" +
      "riceLesserEqualStopPrice\020\010\022#\n\037CC_AskPric" +
      "eGreaterThanStopPrice\020\t\022$\n CC_AskPriceGr" +
      "eaterEqualStopPrice\020\n\022\"\n\036CC_AskPriceLess" +
      "erThanStopPrice\020\013\022#\n\037CC_AskPriceLesserEq" +
      "ualStopPrice\020\014\022#\n\037CC_BidPriceGreaterThan" +
      "StopPrice\020\r\022$\n CC_BidPriceGreaterEqualSt" +
      "opPrice\020\016\022\"\n\036CC_BidPriceLesserThanStopPr" +
      "ice\020\017\022#\n\037CC_BidPriceLesserEqualStopPrice" +
      "\020\020\022)\n%CC_LocalLastPriceLesserEqualStopPr" +
      "ice\020\021\022*\n&CC_LocalLastPriceGreaterEqualSt" +
      "opPrice\020\022*\255\001\n\rTradeTypeEnum\022\016\n\nTT_Unknow" +
      "n\020\000\022\027\n\023TT_SplitCombination\020\001\022\r\n\tTT_Commo" +
      "n\020\002\022\027\n\023TT_OptionsExecution\020\003\022\n\n\006TT_OTC\020\004" +
      "\022\021\n\rTT_EFPDerived\020\005\022\031\n\025TT_CombinationDer" +
      "ived\020\006\022\021\n\rTT_BlockTrade\020\007*b\n\017PriceSource" +
      "Enum\022\020\n\014PSRC_Unknown\020\000\022\022\n\016PSRC_LastPrice" +
      "\020\001\022\014\n\010PSRC_Buy\020\002\022\r\n\tPSRC_Sell\020\003\022\014\n\010PSRC_" +
      "OTC\020\004b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
